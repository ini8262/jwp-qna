package qna.domain.entity;

import lombok.*;
import qna.CannotDeleteException;
import qna.domain.entity.collection.Answers;
import qna.domain.entity.collection.DeleteHistories;
import qna.domain.entity.common.Deleteable;
import javax.persistence.*;
import java.util.List;

/**
 * create table question
 * (
 *     id         bigint generated by default as identity,
 *     contents   clob,
 *     created_at timestamp    not null,
 *     deleted    boolean      not null,
 *     title      varchar(100) not null,
 *     updated_at timestamp,
 *     writer_id  bigint,
 *     primary key (id)
 * )
 */
@Getter
@ToString(of = {"id", "contents", "title", "writer"})
@EqualsAndHashCode(of = "id")
@Entity @NoArgsConstructor
public class Question extends Deleteable<User, DeleteHistories> {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Lob
    private String contents;

    @Column(length = 100, nullable = false)
    private String title;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "writer_id", foreignKey = @ForeignKey(name = "fk_question_to_user"))
    private User writer;

    @Embedded
    private Answers answers = new Answers();

    public Question(String title, String contents) {
        this(null, title, contents);
    }

    @Builder
    public Question(Long id, String title, String contents) {
        this.id = id;
        this.title = title;
        this.contents = contents;
    }

    public Question writeBy(User writer) {
        this.writer = writer;
        return this;
    }

    protected void addAnswer(Answer answer) {
        this.answers.add(answer);
    }

    @Override
    public boolean isOwner(User writer) {
        return this.writer.equals(writer);
    }

    @Override
    protected void validation(User deleter) throws CannotDeleteException {
        super.validation(deleter);

        if (answers.nonOnlyOwner(deleter)) {
            throw new CannotDeleteException("다른 사람이 쓴 답변이 있어 삭제할 수 없습니다.");
        }
    }

    @Override
    protected DeleteHistories appendDeleteHistory(User deleter) throws CannotDeleteException {
        return new DeleteHistories()
                .append(DeleteHistory.ContentType.QUESTION.getDeleteHistory(this.id, deleter))
                .append(answers.deleted(deleter));
    }
}
