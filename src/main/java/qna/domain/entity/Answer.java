package qna.domain.entity;

import lombok.*;
import qna.domain.entity.common.Deleteable;
import qna.NotFoundException;
import qna.UnAuthorizedException;
import javax.persistence.*;
import java.util.Objects;

/**
 * create table answer
 * (
 *     id          bigint generated by default as identity,
 *     contents    clob,
 *     created_at  timestamp not null,
 *     deleted     boolean   not null,
 *     question_id bigint,
 *     updated_at  timestamp,
 *     writer_id   bigint,
 *     primary key (id)
 * )
 */
@Getter
@ToString(of = {"id", "contents", "writer"})
@EqualsAndHashCode(of = "id")
@Entity @NoArgsConstructor
public class Answer extends Deleteable<User, DeleteHistory> {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Lob
    private String contents;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "question_id", foreignKey = @ForeignKey(name = "fk_answer_to_question"))
    private Question question;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "writer_id", foreignKey = @ForeignKey(name = "fk_answer_writer"))
    private User writer;

    public Answer(User writer, String contents) {
        this(null, writer, contents);
    }

    @Builder
    public Answer(Long id, User writer, String contents) {
        if (Objects.isNull(writer)) {
            throw new UnAuthorizedException();
        }

        this.id = id;
        this.writer = writer;
        this.contents = contents;
    }

    public Answer toQuestion(Question question) {
        if (Objects.isNull(question)) {
            throw new NotFoundException();
        }

        this.question = question;
        question.addAnswer(this);

        return this;
    }

    public boolean isEqualQuestion(Question question) {
        return Objects.equals(this.question, question);
    }

    @Override
    public boolean isOwner(User writer) {
        return this.writer.equals(writer);
    }

    @Override
    protected DeleteHistory appendDeleteHistory(User deleter) {
        return DeleteHistory.ContentType.ANSWER.getDeleteHistory(this.id, deleter);
    }
}
