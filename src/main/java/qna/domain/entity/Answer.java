package qna.domain.entity;

import lombok.ToString;
import qna.domain.entity.common.Deleteable;
import qna.domain.entity.common.TraceDate;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import qna.NotFoundException;
import qna.UnAuthorizedException;

import javax.persistence.*;
import java.util.Objects;

/**
 * create table answer
 * (
 *     id          bigint generated by default as identity,
 *     contents    clob,
 *     created_at  timestamp not null,
 *     deleted     boolean   not null,
 *     question_id bigint,
 *     updated_at  timestamp,
 *     writer_id   bigint,
 *     primary key (id)
 * )
 */

@Getter
@NoArgsConstructor
@Entity
@ToString(of = {"id", "contents", "title", "writer", "deleted"})
public class Answer extends TraceDate implements Deleteable {

    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Lob
    private String contents;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "question_id")
    private Question question;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "writer_id")
    private User writer;

    @Column(nullable = false)
    private boolean deleted;

    public Answer(User writer, Question question, String contents) {
        this(null, writer, question, contents);
    }

    @Builder
    public Answer(Long id, User writer, Question question, String contents) {
        this.id = id;

        if (Objects.isNull(writer)) {
            throw new UnAuthorizedException();
        }

        if (Objects.isNull(question)) {
            throw new NotFoundException();
        }

        this.writer = writer;
        this.question = question;
        this.contents = contents;
        this.deleted = false;
    }

    public boolean isOwner(User writer) {
        return this.writer.equals(writer);
    }

    public void toQuestion(Question question) {
        this.question = question;
    }

    public void writeBy(Question question, User writer) {
        this.question = question;
        this.writer = writer;
    }

    @Override
    public void deleted() {
        this.deleted = true;
    }
}
